[{"D:\\React Projects\\champions-dashboard-assignment\\src\\index.js":"1","D:\\React Projects\\champions-dashboard-assignment\\src\\App.js":"2","D:\\React Projects\\champions-dashboard-assignment\\src\\reportWebVitals.js":"3","D:\\React Projects\\champions-dashboard-assignment\\src\\Containers\\Champions\\Champion\\ChampionInfo.js":"4","D:\\React Projects\\champions-dashboard-assignment\\src\\Containers\\Champions\\Watchlist.js":"5","D:\\React Projects\\champions-dashboard-assignment\\src\\Containers\\Champions\\Champions.js":"6","D:\\React Projects\\champions-dashboard-assignment\\src\\Containers\\Champions\\Champion\\Champion.js":"7"},{"size":505,"mtime":1609663793799,"results":"8","hashOfConfig":"9"},{"size":828,"mtime":1609657364844,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":3022,"mtime":1609743085401,"results":"12","hashOfConfig":"9"},{"size":2613,"mtime":1609668029300,"results":"13","hashOfConfig":"9"},{"size":6943,"mtime":1609682654118,"results":"14","hashOfConfig":"9"},{"size":9803,"mtime":1609742973000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"1ba6osw",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"19"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"D:\\React Projects\\champions-dashboard-assignment\\src\\index.js",["35"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["36","37"],"D:\\React Projects\\champions-dashboard-assignment\\src\\App.js",[],"D:\\React Projects\\champions-dashboard-assignment\\src\\reportWebVitals.js",[],"D:\\React Projects\\champions-dashboard-assignment\\src\\Containers\\Champions\\Champion\\ChampionInfo.js",["38"],"import React from \"react\";\r\nimport * as ReactBootStrap from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\nimport './ChampionInfo.css';\r\nconst ChampionInfo = (props) => {\r\n    const { location } = props;\r\n  const { history } = props;\r\n  const { champion } = location.state;\r\n  const openHome = () => {\r\n    history.push(\"/\");\r\n  };\r\n  return(\r\n    <div className=\"container\">\r\n    <button\r\n      type=\"button\"\r\n      className=\"styledButton\"\r\n      onClick={openHome}\r\n    >\r\n      Home\r\n    </button>\r\n    <ReactBootStrap.Table responsive=\"lg\" striped bordered hover>\r\n      <tbody>\r\n        <tr>\r\n          <td>id </td>\r\n          <td>\r\n            {\" \"}\r\n            {champion.id}\r\n            {\" \"}\r\n          </td>\r\n          <td rowSpan='23' className=\"imageFormat\">\r\n            <img src={champion.big_image_url} alt={champion.big_image_url} />       \r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>name </td>\r\n          <td>\r\n            {\" \"}\r\n            {champion.name}\r\n            {\" \"}\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>armor </td>\r\n          <td>\r\n            {\" \"}\r\n            {champion.armor}\r\n            {\" \"}\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>armorperlevel </td>\r\n          <td>\r\n            {\" \"}\r\n            {champion.armorperlevel}\r\n            {\" \"}\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>attackdamage </td>\r\n          <td>\r\n            {\" \"}\r\n            {champion.attackdamage}\r\n            {\" \"}\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>attackdamageperlevel </td>\r\n          <td>\r\n            {\" \"}\r\n            {champion.attackdamageperlevel}\r\n            {\" \"}\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>attackrange </td>\r\n          <td>\r\n            {\" \"}\r\n            {champion.attackrange}\r\n            {\" \"}\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>attackspeedoffset </td>\r\n          <td>\r\n            {\" \"}\r\n            {champion.attackspeedoffset}\r\n            {\" \"}\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>attackspeedperlevel </td>\r\n          <td>\r\n            {\" \"}\r\n            {champion.attackspeedperlevel}\r\n            {\" \"}\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td>movespeed </td>\r\n          <td>\r\n            {\" \"}\r\n            {champion.movespeed}\r\n            {\" \"}\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td>spellblock </td>\r\n          <td>\r\n            {\" \"}\r\n            {champion.spellblock}\r\n            {\" \"}\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>spellblockperlevel </td>\r\n          <td>\r\n            {\" \"}\r\n            {champion.spellblockperlevel}\r\n            {\" \"}\r\n          </td>\r\n        </tr>\r\n       \r\n      </tbody>\r\n    </ReactBootStrap.Table>\r\n  </div>\r\n  );\r\n};\r\n\r\n// ChampionInfo.propTypes = {\r\n//     location: Object.isRequired,\r\n//     history: Object.isRequired,\r\n//   };\r\n  \r\n  export default ChampionInfo;","D:\\React Projects\\champions-dashboard-assignment\\src\\Containers\\Champions\\Watchlist.js",[],"D:\\React Projects\\champions-dashboard-assignment\\src\\Containers\\Champions\\Champions.js",["39"],"\r\nimport React, { Component } from \"react\";\r\n// import { useHistory } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport Champion from \"./Champion/Champion\";\r\n\r\nconst initialState = {\r\n    articles: [],\r\n    searches: [],\r\n    watchlist: [],\r\n    page: 1,\r\n    pageSize: 10,\r\n    articleLength: 50,\r\n    visibleArticles: [],\r\n    searchedText: \"\",\r\n    champion: [],\r\n    sortBy: \"\",\r\n    sortOn: \"\",\r\n  };\r\n  const token = \"z0ByBS37GxjZtLGFf4qBi1HW6-lpyIc2MpiZuSp97R5S9bfaJq4\";\r\n  class Champions extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = JSON.parse(localStorage.getItem(\"champ\"))\r\n        ? JSON.parse(localStorage.getItem(\"champ\"))\r\n        : initialState;\r\n    }\r\n  \r\n    componentDidMount() {\r\n      const { articles } = this.state;\r\n      if (articles && articles.length === 0) {\r\n        const defaultAPI = `https://api.pandascore.co/lol/champions?page[number]=&page[size]=&token=${token}`;\r\n        const { pageSize } = this.state;\r\n        fetch(defaultAPI)\r\n          .then((response) => response.json())\r\n          .then((data) => this.setState({\r\n            articles: data,\r\n            visibleArticles: data.slice(0, pageSize),\r\n            articleLength: data.length,\r\n          }, () => { this.updateLocalStorage(); }));\r\n      } else {\r\n        const { page } = this.state;\r\n        this.setPage(page);\r\n      }\r\n    }\r\n  \r\n\r\n\r\n       /**\r\n   * Set number of champions per page\r\n   *\r\n   * @param {object} event\r\n   */\r\n  setPageSize = (event) => {\r\n    const { articles } = this.state;\r\n    const cropsArticles = articles.slice(0, event);\r\n    this.setState({\r\n      pageSize: event,\r\n      visibleArticles: cropsArticles,\r\n    }, () => {\r\n      this.setFirstPage();\r\n      this.updateLocalStorage();\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Change  Page\r\n   *\r\n   * @param {object} event Page Number\r\n   */\r\n  setPage = (event) => {\r\n    this.setState({\r\n      page: event,\r\n    });\r\n    let { articles } = this.state;\r\n    const { pageSize, articleLength } = this.state;\r\n    const pageSkip = (event - 1) * pageSize;\r\n    const pageEndExpected = +pageSkip + +pageSize;\r\n    const pageEnd = pageEndExpected > articleLength\r\n      ? articleLength\r\n      : +pageSkip + +pageSize;\r\n    articles = articles.slice(pageSkip, pageEnd);\r\n    this.setState({\r\n      page: event,\r\n      visibleArticles: articles,\r\n    }, () => this.updateLocalStorage());\r\n  };\r\n  /**\r\n   * Go to Watchlist\r\n   */\r\n  openWatchList = () => {\r\n    const { history } = this.props;\r\n    history.push({\r\n      pathname: \"/ChampionWatchlist\",\r\n    });\r\n  };\r\n\r\n\r\n  setFirstPage = () => {\r\n    this.setState({\r\n      page: 1,\r\n    });\r\n    this.updateLocalStorage();\r\n    this.setPage(1);\r\n  };\r\n\r\n    /**\r\n   * Compare by Ascending order\r\n   * @param {string} key Element to be sorted\r\n   * @returns function that shows if element is ascending or not\r\n   */\r\n  compareByAsc = (key) => (a, b) => {\r\n    if (a[key] < b[key]) {\r\n      return -1;\r\n    }\r\n    if (a[key] > b[key]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n\r\n  compareByDesc = (key) => (a, b) => {\r\n    if (a[key] > b[key]) {\r\n      return -1;\r\n    }\r\n    if (a[key] < b[key]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  };\r\n   /**\r\n   *Sort by Ascending\r\n   *\r\n   * @param {string} key element to be sorted Ascending\r\n   */\r\n  sortByAsc = (key) => {\r\n    const { articles } = this.state;\r\n    articles.sort(this.compareByAsc(key));\r\n    this.setState({ articles, sortBy: \"Asc\", sortOn: key });\r\n    this.setPage(1);\r\n    this.updateLocalStorage();\r\n  };\r\n\r\n  /**\r\n   *Sort by Descending\r\n   *\r\n   * @param {string} key element to be sorted Descending\r\n   */\r\n  sortByDesc = (key) => {\r\n    const { articles } = this.state;\r\n    articles.sort(this.compareByDesc(key));\r\n    this.setState({ articles, sortBy: \"Desc\", sortOn: key });\r\n    this.setPage(1);\r\n    this.updateLocalStorage();\r\n  };\r\n\r\n\r\n  sort = (key) => {\r\n    const { visibleArticles } = this.state;\r\n    visibleArticles.sort(this.compareByDesc(key));\r\n    this.setState({ visibleArticles });\r\n    this.setPage(1);\r\n    this.updateLocalStorage();\r\n  };\r\n\r\n   /**\r\n   *save searched text\r\n   *\r\n   * @param {string} event text typed for searching\r\n   */\r\n  searchEnter = (event) => {\r\n    const { page } = this.state;\r\n    if (event !== \"\") {\r\n      const defaultAPI = `https://api.pandascore.co/lol/champions?search[name]=${event}&token=h1uX-wC3YOCMRJRUGQIXQ2y2vGwEnYlrKYPdrStNUnI01Ew63a4`;\r\n      fetch(defaultAPI)\r\n        .then((response) => response.json())\r\n        .then((data) => this.setState({\r\n          searches: data,\r\n          visibleArticles: data,\r\n          searchedText: event,\r\n        }));\r\n    } else {\r\n      this.setState({\r\n        searchedText: \"\",\r\n        searches: [],\r\n      }, () => this.setPage(page));\r\n    }\r\n    this.updateLocalStorage();\r\n  };\r\n /**\r\n   *Add Champion to Watchlist\r\n   *\r\n   * @param {Array} event Champion to add\r\n   */\r\n  addToWatchList = (event) => {\r\n    this.state.watchlist.push(event);\r\n    this.setState({\r\n      pageSize: this.state.pageSize,\r\n    });\r\n  };\r\n  /**\r\n   *Remove Champion from Watchlist\r\n   *\r\n   * @param {Array} event Champion to remove from Watchlist\r\n   */\r\n  removeFromWatchlist = (event) => {\r\n    this.setState({\r\n      watchlist: this.state.watchlist.filter((e) => e.id !== event),\r\n    });\r\n  };\r\n\r\n  openChampionDetails = (champion) => {\r\n    // const history = useHistory();\r\n    const { history } = this.props;\r\n    this.setState({\r\n      champion,\r\n    }, () => {\r\n      this.updateLocalStorage();\r\n      history.push({\r\n        pathname: \"/ChampionInfo\",\r\n      });\r\n    });\r\n  };\r\n\r\n  updateLocalStorage() {\r\n    localStorage.setItem(\"champ\", JSON.stringify(this.state));\r\n  }\r\n  render() {\r\n    const {\r\n      articles, visibleArticles, page, pageSize, watchlist, searchedText, sortBy, sortOn,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        {articles.length> 0 ? (\r\n          <Champion\r\n            allChampions={articles}\r\n            champions={visibleArticles}\r\n            setPageSize={this.setPageSize}\r\n            page={page}\r\n            pageSize={pageSize}\r\n            setPage={this.setPage}\r\n            addToWatchList={this.addToWatchList}\r\n            removeFromWatchlist={this.removeFromWatchlist}\r\n            watchlist={watchlist}\r\n            openWatchlist={this.openWatchList}\r\n            firstPage={this.setFirstPage}\r\n            lastPage={this.setLastPage}\r\n            sortDesc={this.sortByDesc}\r\n            sortAsc={this.sortByAsc}\r\n            onSearchEnter={this.searchEnter}\r\n            searchedText={searchedText}\r\n            sortBy={sortBy}\r\n            sortOn={sortOn}\r\n            openChampionDetails={this.openChampionDetails}\r\n          />\r\n        ) : (\r\n          <h1>Please wait</h1>\r\n        )}\r\n      </div>\r\n    );\r\n    }\r\n  }\r\n  // Champions.propTypes = {\r\n  //   history: Object.isRequired,\r\n  // };\r\n  export default Champions;","D:\\React Projects\\champions-dashboard-assignment\\src\\Containers\\Champions\\Champion\\Champion.js",["40"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { DropdownButton, Dropdown } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSortUp, faSortDown, faSort } from \"@fortawesome/free-solid-svg-icons\";\r\nimport * as ReactBootStrap from \"react-bootstrap\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\nimport SearchField from \"react-search-field\";\r\nimport './Champion.css';\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst pageNumbers = [10, 20, 50];\r\n\r\nconst Champion = (props) => {\r\n    const watchlist = JSON.parse(localStorage.getItem(\"watchlist\")) !== null ? JSON.parse(localStorage.getItem(\"watchlist\")) : [];\r\n    const [modWatchlist, setWatchlist] = useState(watchlist);\r\n\r\n    const updateWatchlist = (watchlst) => {\r\n      localStorage.setItem(\"watchlist\", JSON.stringify(watchlst));\r\n    };\r\n\r\n    useEffect(() => {\r\n        updateWatchlist(modWatchlist);\r\n      });\r\n\r\n      const {\r\n        allChampions, pageSize, onSearchEnter, openWatchlist,\r\n        searchedText, champions, firstPage, lastPage, setPageSize, sortBy, sortOn,\r\n      } = props;\r\n\r\n      const removeChampion = (event) => {\r\n        const watch = modWatchlist.filter((e) => e.id !== event);\r\n        setWatchlist(watch, () => { updateWatchlist(modWatchlist); });\r\n      };\r\n\r\n\r\n      const addChampion = (event) => {\r\n        setWatchlist((watchlsts) => [...watchlsts, event]);\r\n        updateWatchlist(modWatchlist);\r\n      };\r\n\r\n      const champLength = allChampions.length;\r\n      const expectedDivisns = champLength / pageSize;\r\n      const divisions = champLength % pageSize === 0\r\n        ? expectedDivisns\r\n        : Math.floor(expectedDivisns) + 1;\r\n      const items = [];\r\n      for (let number = 1; number <= divisions; number += 1) {\r\n        // Adding Pagination\r\n        items.push(\r\n          <Pagination.Item\r\n            key={number}\r\n            active={number === props.page}\r\n            onClick={() => props.setPage(number)}\r\n          >\r\n            {number}\r\n          </Pagination.Item>,\r\n        );\r\n      }\r\n\r\n      return(\r\n        <div className=\"\">\r\n  <div className=\"row\">\r\n          <div className=\"col left\">\r\n            <SearchField\r\n              placeholder=\"Search item\"\r\n              className=\"styledButton\"\r\n              value={searchedText}\r\n              onChange={onSearchEnter}\r\n            />\r\n          </div>\r\n          <div className=\"col right\">\r\n            <div className=\"display-inlineb\">\r\n              <DropdownButton\r\n                title={`PageSize ( ${pageSize} )`}\r\n                id=\"document-type\"\r\n                className=\"display-inlineb\"\r\n                onSelect={(e) => setPageSize(e)}>\r\n                {pageNumbers.map((opt) => (\r\n                  <Dropdown.Item as=\"button\" eventKey={opt} key={opt}>\r\n                    {opt}\r\n                  </Dropdown.Item>\r\n                ))}\r\n              </DropdownButton>\r\n            </div>\r\n            <button\r\n              type=\"button\"\r\n              className=\"styledButton\"\r\n              id=\"openWatchlist\"\r\n              onClick={openWatchlist}>\r\n              Watchlist ({modWatchlist.length})\r\n            </button>\r\n\r\n          </div>\r\n        </div>\r\n        <div className=\"container\">\r\n        <ReactBootStrap.Table responsive=\"sm\" bordered hover>\r\n          <thead className=\"header\">\r\n            <tr className=\"center\">\r\n            \r\n              <th>\r\n                <div className=\"heading\">\r\n                  <div>\r\n                    Champion ID\r\n                  </div>\r\n                  <div className=\"sortIcon\">\r\n                    <i className=\"fa fa-sort-asc\" style={sortBy === \"Asc\" && sortOn === \"id\" ? { color: \"red\" } : { color: \"lightgray\" }} onClick={() => props.sortAsc(\"id\")} />\r\n                    <i className=\"fa fa-sort-desc\" style={sortBy === \"Desc\" && sortOn === \"id\" ? { color: \"red\" } : { color: \"lightgray\" }} onClick={() => props.sortDesc(\"id\")} />\r\n                  </div>\r\n                </div>\r\n              </th>\r\n              <th>\r\n                <div className=\"heading\">\r\n                  <div>\r\n                    Name\r\n                  </div>\r\n                  <div className=\"sortIcon\">\r\n                    <FontAwesomeIcon icon={faSortUp} style={sortBy === \"Asc\" && sortOn === \"name\" ? { color: \"#FF0000\" } : { color: \"lightgray\" }} size=\"1x\" onClick={() => props.sortAsc(\"name\")} />\r\n                    <FontAwesomeIcon icon={faSortDown} style={sortBy === \"Desc\" && sortOn === \"name\" ? { color: \"#FF0000\" } : { color: \"lightgray\" }} size=\"1x\" onClick={() => props.sortDesc(\"name\")} />\r\n                  </div>\r\n                </div>\r\n              </th>\r\n              <th>\r\n                <div className=\"heading\">\r\n                  <div>\r\n                    Armor\r\n                  </div>\r\n                  <div className=\"sortIcon\">\r\n                    <FontAwesomeIcon icon={faSortUp} style={sortBy === \"Asc\" && sortOn === \"armor\" ? { color: \"#FF0000\" } : { color: \"lightgray\" }} size=\"1x\" onClick={() => props.sortAsc(\"armor\")} />\r\n                    <FontAwesomeIcon icon={faSortDown} style={sortBy === \"Desc\" && sortOn === \"armor\" ? { color: \"#FF0000\" } : { color: \"lightgray\" }} size=\"1x\" onClick={() => props.sortDesc(\"armor\")} />\r\n                  </div>\r\n                </div>\r\n              </th>\r\n              <th>\r\n                <div className=\"heading\">\r\n                  <div>\r\n                  attackrange\r\n                  </div>\r\n                  <div className=\"sortIcon\">\r\n                    <FontAwesomeIcon icon={faSortUp} style={sortBy === \"Asc\" && sortOn === \"attackrange\" ? { color: \"#FF0000\" } : { color: \"lightgray\" }} size=\"1x\" onClick={() => props.sortAsc(\"attackrange\")} />\r\n                    <FontAwesomeIcon icon={faSortDown} style={sortBy === \"Desc\" && sortOn === \"attackrange\" ? { color: \"#FF0000\" } : { color: \"lightgray\" }} size=\"1x\" onClick={() => props.sortDesc(\"attackrange\")} />\r\n                  </div>\r\n                </div>\r\n              </th>\r\n              <th>\r\n                <div className=\"heading\">\r\n                  <div>\r\n                  attackspeedperlevel\r\n                  </div>\r\n                  <div className=\"sortIcon\">\r\n                    <FontAwesomeIcon icon={faSortUp} style={sortBy === \"Asc\" && sortOn === \"attackspeedperlevel\" ? { color: \"#FF0000\" } : { color: \"lightgray\" }} size=\"1x\" onClick={() => props.sortAsc(\"attackspeedperlevel\")} />\r\n                    <FontAwesomeIcon icon={faSortDown} style={sortBy === \"Desc\" && sortOn === \"attackspeedperlevel\" ? { color: \"#FF0000\" } : { color: \"lightgray\" }} size=\"1x\" onClick={() => props.sortDesc(\"attackspeedperlevel\")} />\r\n                  </div>\r\n                </div>\r\n              </th>\r\n              <th>Champion Image</th>\r\n              <th>Watchlist Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {champions.map((champion) => (\r\n              <tr key={champion.id} className=\"center\">\r\n                <td>{champion.id}</td>\r\n                <td>\r\n                  <Link\r\n                    to={{\r\n                      pathname: \"/ChampionInfo\",\r\n                      state: { champion },\r\n                    }}\r\n                  >\r\n                    {champion.name}\r\n                  </Link>\r\n                </td>\r\n                <td>{champion.armor}</td>\r\n                <td>{champion.attackrange}</td>\r\n                <td>{champion.attackspeedperlevel}</td>\r\n                <td>\r\n                  <img src={champion.image_url} alt={champion.image_url} />\r\n                </td>\r\n                <td>\r\n                  <div>\r\n                    \r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary btn-lg backgroundColorGreen\" disabled={!(modWatchlist.filter((e) => e.id === champion.id).length === 0)}\r\n                        onClick={() => addChampion(champion)}>\r\n                        Add\r\n                      </button>\r\n                  \r\n                   \r\n                      <button\r\n                        type=\"button\"\r\n                         className=\" btn btn-primary btn-lg backgroundColorRed\" disabled={!(modWatchlist.filter((e) => e.id === champion.id).length === 1)}\r\n                        onClick={() => removeChampion(champion.id)}>\r\n                        Remove\r\n                      </button>\r\n              \r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </ReactBootStrap.Table>\r\n        {searchedText === \"\" && (\r\n        <Pagination>\r\n          <Pagination.First onClick={firstPage} />\r\n          {items}\r\n          <Pagination.Last onClick={lastPage} />\r\n        </Pagination>\r\n        )}\r\n      </div>\r\n\r\n        </div>\r\n      );\r\n\r\n}\r\n\r\nChampion.propTypes = {\r\n    allChampions: PropTypes.array.isRequired, // eslint-disable-line\r\n    champions: PropTypes.array.isRequired, // eslint-disable-line\r\n    setPageSize: PropTypes.func.isRequired,\r\n    page: PropTypes.number.isRequired,\r\n    pageSize: PropTypes.string.isRequired,\r\n    sortBy: PropTypes.string.isRequired,\r\n    sortOn: PropTypes.string.isRequired,\r\n    setPage: PropTypes.func.isRequired,\r\n    watchlist: PropTypes.array.isRequired, // eslint-disable-line\r\n    openWatchlist: PropTypes.func.isRequired,\r\n    firstPage: PropTypes.func.isRequired,\r\n    lastPage: PropTypes.func.isRequired,\r\n    sortAsc: PropTypes.func.isRequired,\r\n    sortDesc: PropTypes.func.isRequired,\r\n    onSearchEnter: PropTypes.func.isRequired,\r\n    searchedText: PropTypes.string.isRequired,\r\n  };\r\n\r\n  export default Champion;",{"ruleId":"41","severity":1,"message":"42","line":5,"column":8,"nodeType":"43","messageId":"44","endLine":5,"endColumn":23},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"41","severity":1,"message":"49","line":3,"column":8,"nodeType":"43","messageId":"44","endLine":3,"endColumn":17},{"ruleId":"41","severity":1,"message":"49","line":4,"column":8,"nodeType":"43","messageId":"44","endLine":4,"endColumn":17},{"ruleId":"41","severity":1,"message":"50","line":6,"column":32,"nodeType":"43","messageId":"44","endLine":6,"endColumn":38},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["51"],"no-negated-in-lhs",["52"],"'PropTypes' is defined but never used.","'faSort' is defined but never used.","no-global-assign","no-unsafe-negation"]